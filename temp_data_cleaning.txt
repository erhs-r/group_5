library(tidyverse)
library(lubridate)
library(datasets)
library(tidycensus)

#Initial reading of the main data file
covid_counties <- read_csv("data_raw/us-counties.csv")
election_counties <- read_csv("data_raw/presidential_election_counties.csv")
masks_counties <- read_csv("data_raw/mask-use-by-county.csv")
# This is from :
#https://github.com/balsama/us_counties_data/blob/main/data/counties.csv#L15
population_counties <- get_estimates( geography = "county", year = "2019", variables = "POP")

#New York population data was incorrect from above source
#State population data pulled from census API
#install census api key for future session use
#census_api_key(key = "9de2c06af35b38352b1a400e0d2b53ecf2488a3f", install = TRUE)
#run this to load census api key and allow queries of census data
readRenviron("~/.Renviron")
#getting state population for 2019
state_population <- get_estimates( geography = "state", year = "2019", variables = "POP")

#data from satasets package to add 2 letter state abbr. column
states = tibble(state_abb = state.abb, state = str_to_lower(state.name)) %>%
  mutate(state_abb = factor(state_abb))
  

#-------------------------------------------------------------------------------

#Cleaning up county population data
population_counties_clean <- population_counties %>% 
  separate(NAME, c("county", "state"), sep = ", ") %>% 
  rename_all(str_to_lower) %>% 
  select(-geoid, -variable) %>% 
  mutate(county = str_to_lower(county),
         state = str_to_lower(state),
         county = str_replace(county, " county", "")) %>% 
  rename(population = value)

#Selecting only Trump & Biden results (along with other county identifying columns)
#Also creating percent_biden column that can be used for gradient stuff
election_counties_clean <- election_counties %>% 
  select(fips, name, state, results_trumpd, results_absentee_trumpd,
         results_bidenj, results_absentee_bidenj) %>% 
  mutate(name = str_to_lower(name),
         trump_total = results_trumpd + results_absentee_trumpd,
         biden_total = results_bidenj + results_absentee_bidenj,
         percent_biden = biden_total / (biden_total + trump_total),
         winner = if_else(biden_total > trump_total, "biden", "trump"),
         winner = factor(winner),
         state = str_replace(state, "-", " ")) %>% 
  rename(county = name) %>%
  filter(state != "district of-columbia")


### Retaining date column and changing date column to Date class
covid_counties_clean <- covid_counties %>% 
  filter(date == "2020-11-17") %>% 
  select(fips, county, state, cases, deaths) %>% 
  mutate(county = str_to_lower(county),
         state = str_to_lower(state))

covid_counties_clean_dates <- covid_counties %>% 
  mutate(date = ymd(date),
         county = str_to_lower(county),
         state = str_to_lower(state))

# CHECKING TO MAKE SURE CUMULATIVE AND NOT ACTIVE CASES
# covid_counties %>% 
#   filter(fips == "04013") %>% 
#   ggplot(aes(date, cases)) +
#   geom_lin

# each participant was asked: How often do you wear a mask in public when you expect to be within six feet of another person?
# 250,000 survey responses between July 2 and July 14
# mask_percent is just what I thought would give the % of people who "commonly" wear a mask in the county when in public
masks_counties_clean <- masks_counties %>% 
  rename_all(str_to_lower) %>% 
  rename(fips = countyfp) %>% 
  mutate(mask_percent = frequently + always)

#Combining Data Sets
master_covid_election <- covid_counties_clean %>% 
  inner_join(population_counties_clean, by = c("county", "state")) %>% 
  left_join(election_counties_clean, by = c("fips", "county", "state")) %>% 
  inner_join(masks_counties_clean, by = "fips") %>%
  inner_join(states, by = "state")

master_covid_election_with_dates <- covid_counties_clean_dates %>% 
  inner_join(population_counties_clean, c("county", "state")) %>% 
  left_join(election_counties_clean, by = c("fips", "county", "state")) %>% 
  inner_join(masks_counties_clean, by = "fips") %>%
  inner_join(states, by = "state")

# #Just looking at what counties had the highest death rate
# master_covid_election %>% 
#   mutate(death_rate = (deaths / population) * 100) %>% 
#   select(state, county, death_rate) %>% 
#   arrange(desc(death_rate))


#states won biden or trump. source = https://www.270towin.com/2020-election-results-live/
biden_states <- c("WA", "OR", "CA", "NV", "AZ", "NM", "CO", "HI", "MN", "WI", 
                  "IL", "MI", "GA", "PA", "VA", "NY", "VT", "NH", "MA", "RI", 
                  "CT", "NJ", "DE", "MD", "DC")
trump_states <- c("AK", "ID", "UT", "MT", "WY", "ND", "SD", "KS", "OK", "TX", 
                  "LA", "IA", "MO", "AR", "MS", "AL", "TN", "KY", "IN", "OH", 
                  "WV", "NC", "SC", "FL")
split_states <- c("NE", "ME")

#adding state win column
master_covid_election <- master_covid_election %>%
  mutate(state_win = case_when(state_abb %in% biden_states ~ "biden",
                               state_abb %in% trump_states ~ "trump",
                               state_abb %in% split_states ~ "split",
                               is.na(winner) & state %in% biden_states ~ "biden",
                               is.na(winner)& state %in% trump_states ~ "trump",
                               is.na(winner)& state %in% split_states ~ "split"))

master_covid_election_with_dates <- master_covid_election_with_dates %>%
  mutate(state_win = case_when(state_abb %in% biden_states ~ "biden",
                               state_abb %in% trump_states ~ "trump",
                               state_abb %in% split_states ~ "split",
                               is.na(winner) & state %in% biden_states ~ "biden",
                               is.na(winner)& state %in% trump_states ~ "trump",
                               is.na(winner)& state %in% split_states ~ "split"))

#adding total cases per state column
total_state_cases <- master_covid_election %>%
  group_by(state_abb) %>%
  summarise(total_cases = sum(cases))

master_covid_election <- master_covid_election %>%
  inner_join(total_state_cases, by = "state_abb") %>%
  mutate(state = factor(state),
         state_abb = factor(state_abb))

total_state_cases <- master_covid_election_with_dates %>%
  group_by(state_abb, date) %>%
  summarise(total_cases = sum(cases))

master_covid_election_with_dates <- master_covid_election_with_dates %>%
  inner_join(total_state_cases, by = c("state_abb", "date")) %>%
  mutate(state = factor(state),
         state_abb = factor(state_abb))

# replacing NAs in winner column with info from state_win
master_covid_election <- master_covid_election %>%
  mutate(winner = case_when(is.na(winner) ~ state_win,
                            !is.na(winner) ~ as.character(winner)),
         death_rate = deaths / population,
         infection_rate = cases / population)

master_covid_election_with_dates <- master_covid_election_with_dates %>%
  mutate(winner = case_when(is.na(winner) ~ state_win,
                            !is.na(winner) ~ as.character(winner)))

#replacing NAs in other columns with 0's
master_covid_election[is.na(master_covid_election)] <- 0
master_covid_election_with_dates[is.na(master_covid_election_with_dates)] <- 0

#adding state population to covid_master
state_population <- state_population %>%
  rename(state = NAME,
         state_population = value) %>%
  mutate(state = str_to_lower(state)) %>%
  select(-GEOID, -variable)

master_covid_election_with_dates <- master_covid_election_with_dates %>%
  left_join(state_population, by = "state") %>%
  mutate(state_abb = factor(state_abb),
         cases_biden = cases * percent_biden, #adds cases by proportion biden col
         cases_trump = cases * (1 - percent_biden)) #adds cases by proportion trump col

master_covid_election <- master_covid_election %>%
  left_join(state_population, by = "state") %>%
  mutate(state_abb = factor(state_abb),
         cases_biden = cases * percent_biden, #adds cases by proportion biden col
         cases_trump = cases * (1 - percent_biden)) #adds cases by proportion trump col

#Writing master dataframes to data folder
#write_csv(master_covid_election, "./data/master_covid_election.csv")
#write_csv(master_covid_election_with_dates, "./data/master_covid_election_with_dates.csv")

